---
description: 
globs: 
alwaysApply: true
---
# chopup - Project Rules

## 1. Project Overview

goal: A CLI tool to wrap long-running processes, segment their logs into files on demand (via IPC or file watching), and send input to the wrapped process's stdin via IPC.
type: CLI Tool
key features:
- Wraps and runs any user-specified command.
- Captures stdout and stderr from the wrapped process.
- Segments/chops logs into new files in a specified log directory on IPC request (`request-logs` command) or file changes.
- Allows sending input strings to the stdin of the wrapped process via IPC (`send-input` command).
- Graceful shutdown using `tree-kill` for robust process tree cleanup.
- IPC server (Node.js `net` module via Unix domain sockets) for on-demand log chopping and input sending.
- (EXPERIMENTAL) File/directory watching to trigger log chopping.
- (EXPERIMENTAL) Option to send an initial input string on startup.
- (EXPERIMENTAL) Option for an initial log chop on startup.

## 2. Technology Stack

language(s): TypeScript (target: es2016, module: commonjs, strict: true) - see `tsconfig.json`
framework(s): None (CLI, not web)
ui library/styling: N/A
database(s): N/A
state management: N/A
api layer: N/A (IPC via Node.js `net` module using Unix domain sockets)
key libraries:
- commander (CLI argument parsing)
- chokidar (File watching - for experimental `--watch-file` feature)
- tree-kill (Process tree cleanup on exit)
- vitest (Testing framework)
- tsx (TypeScript execution for development)
- @biomejs/biome (Formatting and linting)

## 3. Project Structure

main source directory: src/
core directories:
- src/: Main TypeScript source code (`index.ts` as CLI entry, `chopup.ts` for core logic).
- dist/: Compiled JavaScript output from `tsc`.
- examples/: Example scripts (`interactive-script.js`, `long-running-script.js`) and a verification script (`verify-examples.sh`).
- test/integration/: Integration tests for CLI subcommands and features.
- test/integration/input-tests/: Specific tests for input sending scenarios.
- test/integration/input-tests/fixtures/scripts/: Dummy CLI scripts for input tests.
- test/integration/test-utils/: Test helper utilities.
- tmp/: Temporary files, often generated during tests (e.g., test scripts, logs). Excluded from tsconfig.
- docs/tasks/: Markdown files detailing specific development tasks or issues.
diagram/link: N/A

## 4. Coding Standards & Conventions

language usage: Strict TypeScript (`strict: true` in `tsconfig.json`). Use `node:` prefixed imports for built-in Node.js modules. Avoid `any` where possible. Use optional chaining (`?.`) and nullish coalescing (`??`).
naming conventions:
- files/folders: kebab-case (e.g., `src/chopup-utils.ts`, `examples/verify-examples.sh`)
- variables/functions: camelCase (e.g., `socketPath`, `performInitialSend`)
- types/interfaces: PascalCase (e.g., `ChopupOptions`, `LogBufferEntry`)
code style/formatting: @biomejs/biome. Configured via `biome.json` (if present, otherwise defaults) and run with `pnpm format` / `pnpm lint`.
comments: English. JSDoc for public APIs and complex types/functions. Use `TODO:` for pending work.
imports: Prefer specific member imports over namespace imports where feasible. Group imports: Node.js built-ins, external/npm packages, then internal project modules.

## 5. Key Principles & Best Practices

- Observability: Log all key events (IPC requests/responses, process start/exit, errors, input sending, log chopping) using provided logging functions. Debug logs (`[DEBUG]...`) are available via `--verbose`. Crucial IPC/status messages (`CHOPUP_SOCKET_PATH`, `CHOPUP_PROCESS_READY`) are logged to stdout.
- Robustness: Handle errors gracefully (e.g., IPC connection issues, file system errors), validate paths and inputs, ensure bulletproof process cleanup using `tree-kill`. Output specific error codes for client commands (e.g., `CHOPUP_INPUT_SEND_ERROR_NO_SERVER`).
- User Experience: Clear CLI subcommands (`run`, `request-logs`, `send-input`) and options documented in `README.md`. Helpful error messages and predictable behavior.
- Modularity: CLI subcommands provide separation of concerns. Core logic for wrapping/managing processes is in `src/chopup.ts`. CLI command handling in `src/index.ts`.
- Bulletproof process cleanup: Mandate `tree-kill` for all child/grandchild processes spawned by the wrapped command, both in the CLI tool's main logic and in test teardowns.

## 6. Testing

framework: Vitest (configured in `vitest.config.ts` or `vitest.config.js`)
types:
  - Integration tests for CLI subcommands (`run`, `request-logs`, `send-input`).
  - Tests for IPC communication, log chopping (manual and file-watch triggered), input sending (direct and initial via `--send`), and process lifecycle management.
  - Input scenario tests cover various input types.
  - Verification script `examples/verify-examples.sh` for README examples.
location: 
  - `test/integration/` for main integration tests.
  - `test/integration/input-tests/` for input-specific scenarios.
  - `test/integration/test-utils/` for test helpers.
  - `examples/verify-examples.sh` for end-to-end CLI example checks.

## 7. Tooling & Workflow

package manager: pnpm (version specified in `package.json`'s `packageManager` field)
build command(s): `pnpm build` (which runs `pnpm clean && tsc`)
run command(s):
  - Main application (development): `pnpm dev -- run -- <command_to_wrap...>` or `pnpm dev -- <command_to_wrap...>`
  - Main application (production): `pnpm start -- run -- <command_to_wrap...>` or `node dist/index.js run -- <command_to_wrap...>` or `chopup run -- <command_to_wrap...>` (if globally linked/installed)
  - Requesting logs: `pnpm dev -- request-logs --socket <socket-path>` or `chopup request-logs --socket <socket-path>`
  - Sending input: `pnpm dev -- send-input --socket <socket-path> --input "<string>"` or `chopup send-input --socket <socket-path> --input "<string>"`
version control: Git. Conventional Commits (e.g., `feat:`, `fix:`, `chore:`) are used (evident from `release.config.js` and `CHANGELOG.md`).
ci/cd: GitHub Actions (workflows in `.github/workflows/`). CI typically runs linting, testing, and building. Semantic release is configured for merges to `main`.

## 8. (Optional) Database / API Guidelines

N/A (No database or traditional web API)

## 9. (Optional) Specific Feature Rules

- Log Chopping: Logs are chopped on the `request-logs` IPC command or by the experimental `--watch-file` feature. Each chop creates a new timestamped log file. A final chop occurs on graceful process exit. Log files are stored in the directory specified by `--log-dir` (defaults to `$CHOPUP_LOG_DIR` or `<system_temp_dir>/chopup/logs`).
- Input Sending: Input is sent to the wrapped process's stdin via the `send-input` IPC command or the experimental `--send` flag on the `run` command. The client commands output specific success/error messages (e.g., `CHOPUP_INPUT_SENT`).
- IPC: Communication between `chopup` instances (main `run` command and client commands like `request-logs`, `send-input`) happens over a Unix domain socket. The `run` command prints its socket path as `CHOPUP_SOCKET_PATH=<path>` on startup. The socket path can be specified with `--socket-path` or defaults to `<log-dir>/chopup-<pid>.sock`.
- CLI Structure: The tool uses subcommands: `run` (default), `request-logs`, `send-input`. Global options like `--log-dir`, `--socket-path`, `--verbose` apply to the `run` command.
- Process Cleanup: `tree-kill` is critical. It's used in the main `run` command's shutdown logic and in test teardowns to ensure no orphaned processes.

## 10. (Optional) Rule Referencing

- See [always-global.mdc](mdc:.cursor/rules/always-global.mdc) for overarching global development principles (if this file exists and is relevant).
- Consult `README.md` for user-facing CLI usage and examples.

---

# Project Update Notes (derived from user's custom instructions for previous interactions)

## 1. Avoidable Failures (Historical)
- Initial test app contained invalid TypeScript/JSX, breaking the build. Solution: Use valid Next.js page export.
- TypeScript build failed due to test/ and tmp/ files outside rootDir. Solution: Added "exclude": ["test", "tmp"] to tsconfig.json.
- TypeScript build failed due to dist/index.d.ts overwrite. Solution: Manually removed dist/index.d.ts and rebuilt.

## 2. Changes to Project Behavior/Expectations (Historical)
- CLI now supports direct passthrough: `npx chopup pnpm dev` (with required options), no subcommand explicitly required if arguments follow options.
- Tests updated to verify passthrough CLI behavior.
- tsconfig.json now excludes test/ and tmp/ from build (and vitest.config.ts).

(These historical notes are kept for context but may not reflect the absolute latest state if major refactors have occurred since they were recorded.)
