---
description: 
globs: 
alwaysApply: true
---
# spawn-wrapper - Project Rules

## 1. Project Overview

goal: To create a CLI tool that wraps long-running processes, monitors specified file(s) for changes, and captures/chops the process logs into separate files based on when those file changes occur.
type: CLI Tool
key features:
- Wraps and runs any user-specified command.
- Monitors a specified file or directory for changes (add, change, unlink).
- Captures stdout and stderr from the wrapped process.
- Segments/chops logs into new files in a specified log directory each time a watched file changes or the process ends.
- Graceful shutdown of the wrapped process.

## 2. Technology Stack

language(s): TypeScript (via tsconfig.json, likely targeting ES2016 or newer, actual version from package.json: ^5.8.3)
framework(s): Node.js (implied by @types/node, commander, child_process, fs)
ui library/styling: N/A (CLI Tool)
database(s): N/A
state management: N/A (CLI Tool - internal state for log buffer and timestamps)
api layer: N/A (CLI Tool)
key libraries:
- commander: For CLI argument parsing and command structure.
- chokidar: For efficient file system watching.
- @biomejs/biome: For code formatting and linting.
- tsx: For running TypeScript files directly during development.

## 3. Project Structure

main source directory: src/
core directories:
- src/: Contains the main TypeScript source code (e.g., index.ts).
- dist/: Contains the compiled JavaScript output.
- my_test_logs/: Directory used for storing chopped logs during testing (user-created, can be configured via --log-dir).
- .cursor/rules/: Contains Cursor rule definitions like this one.
- tmp/: For storing test-specific files (e.g., temporary test scripts, mock data related to tests, but not general scratch files).
diagram/link: N/A at this time.

## 4. Coding Standards & Conventions

language usage: Strict TypeScript (implied by tsconfig.json `"strict": true`), `node:` protocol for builtin module imports.
naming conventions:
- files/folders: kebab-case (e.g., `spawn-wrapper`, `my_test_logs`), or as generated by tools.
- components: N/A (CLI Tool)
- variables/functions: camelCase (observed in src/index.ts).
- types/interfaces: PascalCase (e.g., `LogBufferEntry` in src/index.ts).
code style/formatting: @biomejs/biome (configured in package.json scripts: `format`, `lint`).
comments: English, JSDoc style for interfaces/types where appropriate, TODO comments for pending work.
imports: Grouped (stdlib, external, internal - general good practice).

## 5. Key Principles & Best Practices

- Observability: Log key events from the wrapper and child process (e.g., file changes, log chopping, process start/exit).
- Robustness: Handle errors gracefully (e.g., path validation, process errors, file system errors).
- User Experience: Clear CLI options, helpful error messages, and predictable behavior.
- Modularity: (Future goal) Separate concerns into different modules as complexity grows.

## 6. Testing

framework: Manual testing via CLI commands and self-modifying scripts. (Future: Consider Vitest).
types: End-to-end style testing of the CLI's core functionality.
location: Test-specific files (e.g., temporary test scripts, mock data) should be placed in the `tmp/` directory. General scratch/scrap files not related to a specific test should not be placed here.

## 7. Tooling & Workflow

package manager: pnpm (specified in package.json `"packageManager": "pnpm@10.10.0"`)
build command(s): `pnpm build` (executes `tsc`)
run command(s):
  - `pnpm dev -- [options_for_spawn-wrapper] -- <command_to_wrap...>` (executes `tsx src/index.ts`)
  - `pnpm start -- [options_for_spawn-wrapper] -- <command_to_wrap...>` (executes `node dist/index.js`)
  - Direct execution: `node dist/index.js [options_for_spawn-wrapper] -- <command_to_wrap...>`
  - Note on argument passing: When using `pnpm run <script> -- ...`, arguments after the *first* `--` are passed to the script. If the script itself (like `spawn-wrapper`) uses `--` to delimit a sub-command, ensure options for the script precede its own `--`. For example: `pnpm start --watch <file> --log-dir <dir> -- <your_command> <your_command_args>` should be invoked as `pnpm start --watch <file> --log-dir <dir> -- <your_command> <your_command_args>`. The initial `--` after `pnpm start` is crucial for `pnpm` to pass arguments to the script rather than interpreting them as `pnpm` options. However, when using tools that construct commands from `command` and `args` arrays (like some internal testing or shell execution tools), the `pnpm` command might be the main `command` and all subsequent parts (e.g., `start`, `--watch <file>`, `--`, `<your_command>`) become items in the `args` array, omitting the initial `--` that `pnpm` itself would strip.
version control: Git (assumed, standard for such projects).
ci/cd: N/A defined yet.

## 8. (Optional) Database / API Guidelines

N/A

## 9. (Optional) Specific Feature Rules

- Log Chopping: Logs are chopped based on timestamps. Each chop includes logs since the last chop time. A final chop occurs when the wrapped process exits.
- File Watching: Chokidar is used to monitor `add`, `change`, and `unlink` events on the watched path.

## 10. (Optional) Rule Referencing

- See [always-global.mdc](mdc:.cursor/rules/always-global.mdc) for global guiding principles.
